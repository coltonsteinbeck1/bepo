import { SlashCommandBuilder, EmbedBuilder } from "discord.js";
import { DigestManager, DigestUtils } from "../../utils/digestUtils.js";

const digestCommand = {
    data: new SlashCommandBuilder()
        .setName("digest")
        .setDescription("Generate a server activity digest")
        .addStringOption(option =>
            option
                .setName("period")
                .setDescription("Time period for the digest")
                .setRequired(false)
                .addChoices(
                    { name: "Daily", value: "daily" },
                    { name: "Weekly", value: "weekly" },
                    { name: "Last 12 hours", value: "12h" },
                    { name: "Last hour", value: "1h" }
                )
        )
        .addBooleanOption(option =>
            option
                .setName("include_stats")
                .setDescription("Include detailed server statistics")
                .setRequired(false)
        ),
    async execute(interaction) {
        await interaction.deferReply();
        
        const period = interaction.options.getString('period') || 'daily';
        const includeStats = interaction.options.getBoolean('include_stats') || false;
        const guild = interaction.guild;
        
        try {
            // Validate period
            if (!DigestUtils.isValidPeriod(period)) {
                await interaction.editReply("‚ùå Invalid time period specified.");
                return;
            }

            // Check permissions
            const permissionCheck = DigestUtils.validateGuildPermissions(guild);
            if (!permissionCheck.valid) {
                await interaction.editReply(`‚ö†Ô∏è ${permissionCheck.error}`);
                return;
            }

            // Get time range
            const { startTime, timeLabel } = DigestManager.getTimeRange(period);

            // Collect server activity
            const activityResult = await DigestManager.collectServerActivity(guild, startTime, period);
            
            if (!activityResult.success) {
                await interaction.editReply(`‚ö†Ô∏è ${activityResult.error}`);
                return;
            }

            // Generate digest
            const digestResult = await DigestManager.generateDigest(activityResult, guild, timeLabel, includeStats);
            
            if (!digestResult.success) {
                await interaction.editReply(`‚ùå ${digestResult.error}`);
                return;
            }

            const { digest } = digestResult;

            // Create embed
            const embed = new EmbedBuilder()
                .setColor('#0099ff')
                .setTitle(digest.title)
                .setDescription(digest.summary)
                .setThumbnail(guild.iconURL())
                .setTimestamp()
                .setFooter({ text: `Generated by Bepo ‚Ä¢ ${new Date().toLocaleDateString()}` });

            // Add statistics if requested
            if (digest.stats) {
                embed.addFields({
                    name: 'üìä Statistics',
                    value: digest.stats,
                    inline: false
                });
            }

            await interaction.editReply({ embeds: [embed] });

        } catch (error) {
            console.error('Error generating digest:', error);
            await interaction.editReply('Failed to generate server digest. The chaos was too much to process üòµ');
        }
    },
};

export default digestCommand;
